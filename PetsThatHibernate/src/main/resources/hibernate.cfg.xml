<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
	<session-factory>
		<property name="hibernate.connection.username">sukanya</property>
		<property name="hibernate.connection.password">sukanya14</property>
		<property name="hibernate.connection.url">jdbc:postgresql://java2010usf.cgdcd13do7zd.us-east-2.rds.amazonaws.com:5432/postgres?currentSchema=pets</property>
		<property name="hibernate.connection.driver_class">org.postgresql.Driver</property>
		<property name="hibernate.dialect">org.hibernate.dialect.PostgreSQL10Dialect</property>
		<property name="hibernate.connection.pool_size">10</property>
		<property name="hibernate.show_sql">true</property>
		<property name="hibernate.format_sql">true</property>
		
		<!-- The below property has several different values to configure if/how hibernate will perform DDL operations
				CREATE: Drops all existing tables and then re-creates them
					Note, that some systems won't drop, and will need to potentially use create-drop instead (which isn't ideal)
				VALIDATE: Will check that the schema is as expected, otherwise will not run
				UPDATE: Hibernate will not delete anything, but will execute ddl to add to your schema
				NONE: Hibernate will not perform any DDL/checks of any kind
				CREATE-DROP: Hibernate will create tables when run and drop them when the session is closed -->
		<property name="hibernate.hbm2ddl.auto">create</property>
		
		<!-- The resource attribute is used to map entities via xml configuration -->
		<mapping class="com.revature.beans.Person"/>
		
		<!-- The class attribute is used to map entities via annotation configuration -->
		<mapping class="com.revature.beans.Pets"/>
	</session-factory>

</hibernate-configuration>